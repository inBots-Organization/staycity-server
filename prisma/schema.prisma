generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleName {
  super_admin
  admin
  manager
  user
}

enum Permission {
  users_create
  users_read
  users_update
  users_delete
  users_manage
  properties_create
  properties_read
  properties_update
  properties_delete
  properties_manage
  bookings_create
  bookings_read
  bookings_update
  bookings_delete
  bookings_manage
  reports_view
  system_manage
  admin_panel
}

model User {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(100)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  role      RoleName @default(user)
  image     String?  @db.VarChar(500)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Role {
  id          String       @id @default(cuid())
  name        RoleName     @unique
  permissions Permission[]
  description String?      @db.Text
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("roles")
}

// ----------------------------------------------------
// Properties module → Building → Floor → Room → Device
// ----------------------------------------------------

enum BuildingStatus {
  ACTIVE
  MAINTENANCE
  INACTIVE
}

enum RoomType {
  ROOM
  SUITE
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
}

enum Amenity {
  WIFI
  PARKING
  RESTAURANT
  SPA
  GYM
  POOL
  BAR
  LAUNDRY
}

enum DeviceStatus {
  ONLINE
  OFFLINE
  MAINTENANCE
}

/// Optional catalog of device types
// model DeviceType {
//   id          String   @id @default(cuid())
//   name        String   @unique
//   description String?  @db.Text
//   devices     Device[]

//   @@map("device_types")
// }

/// Top-level entity for a hotel/aparthotel building
model Building {
  id        String         @id @default(cuid())
  name      String
  address   String?
  rating    Decimal?       @db.Decimal(2, 1)
  noOfRooms Int            @default(0)
  status    BuildingStatus @default(ACTIVE)

  // Additional fields (keeping existing for backward compatibility)
  slug           String   @unique
  monthlySavings Int      @default(0)
  energyKwh      Decimal? @db.Decimal(10, 1)
  floorsCount    Int      @default(0)

  // Location & contact
  address1     String?
  address2     String?
  city         String?
  country      String?
  latitude     Decimal? @db.Decimal(10, 7)
  longitude    Decimal? @db.Decimal(10, 7)
  contactEmail String?
  contactPhone String?

  // Relations
  amenities BuildingAmenity[]
  stats     BuildingStats?
  floors    Floor[]
  rooms     Room[]
  devices   Device[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([city, country])
  @@index([status])
  @@map("properties") // keep existing table name
}

model BuildingStats {
  id         String   @id @default(cuid())
  building   Building @relation(fields: [buildingId], references: [id])
  buildingId String   @unique @map("propertyId")

  currentGuests  Int @default(0)
  totalCapacity  Int @default(0)
  totalRooms     Int @default(0)
  availableRooms Int @default(0)

  updatedAt DateTime @updatedAt

  @@map("property_stats")
}

model BuildingAmenity {
  building   Building @relation(fields: [buildingId], references: [id])
  buildingId String   @map("propertyId")
  amenity    Amenity

  @@id([buildingId, amenity])
  @@map("property_amenities")
}

model Floor {
  id         String   @id @default(cuid())
  building   Building @relation(fields: [buildingId], references: [id])
  buildingId String   @map("propertyId")

  name    String
  level   Int
  rooms   Room[]
  note    String?
  devices Device[] // NEW

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([buildingId, level])
  @@index([buildingId])
  @@map("floors")
}

model Room {
  id         String   @id @default(cuid())
  building   Building @relation(fields: [buildingId], references: [id])
  buildingId String   @map("propertyId")
  floor      Floor    @relation(fields: [floorId], references: [id])
  floorId    String

  name      String
  type      RoomType   @default(ROOM)
  status    RoomStatus @default(AVAILABLE)
  capacity  Int        @default(2)
  deviceIds String[]   @default([]) // Array of Aranet sensor IDs
  devices   Device[] // Prisma device references

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([buildingId])
  @@index([floorId])
  @@map("rooms")
}

// prisma/schema.prisma — inside model Device { ... }
model Device {
  id         String   @id @default(cuid())
  building   Building @relation(fields: [buildingId], references: [id])
  buildingId String   @map("propertyId")
  floor      Floor?   @relation(fields: [floorId], references: [id])
  floorId    String?
  room       Room?    @relation(fields: [roomId], references: [id])
  roomId     String?
  // type       DeviceType? @relation(fields: [typeId], references: [id])
  // typeId     String?

  name       String
  externalId String?      @db.VarChar(255)
  provider   String       @db.VarChar(64) // <— NEW
  status     DeviceStatus @default(OFFLINE)
  payload    Json?
  part       String?      @db.VarChar(64)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([buildingId])
  @@index([floorId])
  @@index([roomId])
  @@index([provider, externalId])
  @@map("devices")
}

model SystemSettings {
  id        String   @id @default(cuid())

  // ⚡ Energy Levels
  lowMaxKw      Int
  mediumMaxKw   Int
  highMaxKw     Int

  // 🔥 Heatmap & Alerts
  showEnergy      Boolean @default(true)
  showCO2         Boolean @default(true)
  showTemperature Boolean @default(true)

  // 🫁 CO₂ Thresholds
  co2WarningPpm  Int
  co2CriticalPpm Int
  co2DebounceSec Int

  // 🌡️ Temperature Thresholds
  tempUnit        String   @default("Celsius") // أو نعمل enum
  tempHighWarning Int
  tempHighCritical Int
  tempLowWarning  Int
  tempLowCritical Int
  tempDebounceSec Int

  // ⚙️ Automation Logic & Timers
  entryConfirmedSec     Int
  absenceTimeMin        Int
  doorOnlyTimeoutMin    Int
  sensorBatteryTimeoutH Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}
